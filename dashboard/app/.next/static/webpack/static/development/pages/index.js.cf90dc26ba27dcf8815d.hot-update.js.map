{"version":3,"file":"static/webpack/static/development/pages/index.js.cf90dc26ba27dcf8815d.hot-update.js","sources":["webpack:///./pages/index.jsx"],"sourcesContent":["import React, { Component } from \"react\";\nimport Layout from \"../components/Layout\";\nimport {Container, Grid, Segment, Divider} from \"semantic-ui-react\";\nimport { Fetch} from \"react-request\";\nimport {LineChart} from 'react-d3-components';\nimport {Brush} from 'react-d3-components';\nimport {d3} from 'react-d3-components';\n\n\nclass MainIndex extends Component {\n    /*\n    async componentDidMount() {\n        const campaigns = await factory.methods.getDeployedCampaigns().call();\n        console.log(campaigns);\n    }*/\n\n    state = {\n        messages: [],\n        min: 1,\n        max: 10,\n        number: 6,\n        chartData: {label: 'Knimbus Report', values: []},\n        xScale: d3.time.scale().domain([new Date(2015, 2, 5), new Date(2015, 2, 26)]).range([0, 800 - 70]),\n        xScaleBrush: d3.time.scale().domain([new Date(2015, 2, 5), new Date(2015, 2, 26)]).range([0, 800 - 70])\n    }\n\n    componentDidMount(){\n        // this is an \"echo\" websocket service\n        /*\n        this.connection = new WebSocket('wss://echo.websocket.org');\n        // listen to onmessage event\n        this.connection.onmessage = evt => { \n            // add the new message to state\n            this.setState({\n                messages : this.state.messages.concat([ evt.data ])\n            })\n        };\n        \n        // for testing purposes: sending to the echo service which will send it back back\n        setInterval( _ =>{\n            //this.connection.send( Math.floor(Math.random()*(this.state.max-this.state.min+1)+this.state.min) )\n        }, 2000 )*/\n        console.log(\"Starting = \")\n        \n        fetch(\"http://localhost:5000/\")\n\t\t.then(res => res.json())\n\t\t.then(\n\t\t\t(result) => {\n                console.log(result)\n                //var data = JSON.parse(result)\n                var data = result\n                var keys = Object.keys(data)\n                console.log(keys.sort())\n                var a = []\n                for (var i = 0; i < keys.sort().length; i++) {\n                    a.push(data[keys[i]])\n                }\n                console.log(a)\n                let chartData = this.state.chartData\n                chartData[\"values\"] = a\n                this.setState({chartData});\n                \n\t\t\t},\n\t\t\t// Note: it's important to handle errors here\n\t\t\t// instead of a catch() block so that we don't swallow\n\t\t\t// exceptions from actual bugs in components.\n\t\t\t(error) => {\n\t\t\t\tconsole.log( \"  scjhsvccjsd =   \" + JSON.stringify(error))\n\t\t\t\tthis.setState({\n\t\t\t\t\tisLoaded: true,\n\t\t\t\t\terror\n\t\t\t\t});\n\t\t\t}\n        )\n    }\n\n    render() {\n        return (\n            <Layout>\n                <Segment>\n                    {\n                        /*\n                        <Carousel>\n                        <div>\n                            <img src='/static/banner.jpg' />\n                            {<p className=\"legend\">Legend 1</p>}\n                        </div>\n                        <div>\n                            <img src=\"/static/banner.jpg\" />\n                            {<p className=\"legend\">Legend 2</p>}\n                        </div>\n                        <div>\n                            <img src=\"/static/banner.jpg\" />\n                            <p className=\"legend\">Legend 3</p>\n                        </div>\n                    </Carousel>\n                        */\n                    }\n                    \n                </Segment>\n                <Segment>\n                    \n                </Segment>\n                <Segment>\n                    {\n                                                \n                        <LineChart\n                        data={this.state.chartData}\n                        width={800}\n                        height={400}\n                        margin={{top: 10, bottom: 50, left: 50, right: 20}}\n                        xScale={this.state.xScale}\n                        xAxis={{tickValues: this.state.xScale.ticks(d3.time.day, 2), tickFormat: d3.time.format(\"%m/%d\")}}\n                        />\n                        \n                    }\n                </Segment>\n            </Layout>\n        );\n    }\n}\n\nexport default MainIndex;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAPA;AACA;;;;;;AASA;AAAA;AACA;AAAA;AACA;AAAA;;;;;;;;;;;;;;AAcA;AAEA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AAEA;;;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAqBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA;;;;AA9GA;AACA;AAgHA;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}